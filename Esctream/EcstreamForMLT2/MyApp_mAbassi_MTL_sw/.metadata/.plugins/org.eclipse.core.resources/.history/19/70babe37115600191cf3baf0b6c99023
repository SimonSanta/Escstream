#include <Const.h>
#include "game.h"
int abs (int a) {
	if (a>0) { return a; }
	else { return -a; }
}

bool notcuty(LINE* line, PLAYER* player)
{
    if(line->interrupt==false){
        return true;
    }
    else{
        switch (line->dir){
        case UP:
            if(player->y+PLAYER_HEIGHT<line->stop_at)
                return false;
            else
                return true;
            break;
        case DOWN:
                return false;
            break;
        }
    }
}

bool notcutx(LINE* line,PLAYER* player){
    if(line->interrupt==false){
        return true;
    }
    else{
        switch (line->dir){
        case LEFT:
            if(player->x+PLAYER_WIDTH<line->stop_at)
                return false;
            else
                return true;
            break;
        case RIGHT:
                return false;
            break;
        }
    }
}

bool success(LVL* lvl){
    int nbr_succes=0;
    for(int i=0;i<lvl->nbr_players;i++){
      PLAYER* player=lvl->players+i;
        if((player->fin_x<player->x+PLAYER_WIDTH && player->fin_x>player->x) && (player->fin_y<player->y+PLAYER_HEIGHT && player->fin_y>player->y)){
        nbr_succes++;
            printf("VICTORY condition\n");
        }
    }
    return nbr_succes==lvl->nbr_players;
}


void pos_correlator(LVL *lvl){

	// For each line of the level
    for(int j=0; j<lvl->nbr_lines; j++)
    {

        LINE* line = lvl->lines+j;
        bool no_interrupt[lvl->nbr_players]; //permet de remettre à false line->interrupt quand il n'y a plus d'interrupt

        // For each player of the level
        for(int i=0; i<lvl->nbr_players; i++)
        {
            PLAYER* player = lvl->players+i;
            int lx = line->x;
            int px = player->x;
            int pxpw = player->x+PLAYER_WIDTH;
            int lxlw = line->x+line->width;

            no_interrupt[i] = true;

            if (((lx>px && lx<pxpw) ||( lxlw >px && lxlw<pxpw)) && (line->dir==UP || line->dir==DOWN))
            {
            	// Player is cutting a line of same color
                if (line->color == player->color)
                {
                    if (notcuty(line,player))
                    {
                    	// Update defeat
                    	printf("DEFEAT x\n");

                    	*flag = (*flag) | 0x00000002;
                    }
                }
                // Player is blocking a line of opposite color
                else
                {
                	// Update line informations
                    line->interrupt=true;
                    no_interrupt[i]=false;
                    if(line->dir==UP)
                    {

                        line->stop_at=player->y+PLAYER_HEIGHT;
                    }
                    else if(line->dir==DOWN)
                    {
                        line->stop_at=player->y;
                    }
                }
           }
           int ly=line->y;
           int lylh=line->y+line->height;
           int py=player->y;
           int pyph=player->y+PLAYER_HEIGHT;

           if(((ly<pyph && ly>py) || (lylh>py && lylh <pyph )) && (line->dir==RIGHT || line->dir==LEFT))
           {
        	    // Player is cutting a line of same color
                if(line->color==player->color)
                {
                    if(notcutx(line,player))
                    {
                    	// Update defeat
                    	printf("DEFEAT y\n");
                    	*flag = (*flag) | 0x00000002;
                    }
                }
                // Player is blocking a line of opposite color
                else{
                	// Update line informations
                    line->interrupt=true;
                    no_interrupt[i]=false;
                    if(line->dir==LEFT){
                        line->stop_at=player->x+PLAYER_WIDTH;
                    }
                    else if(line->dir==RIGHT){
                        line->stop_at=player->x+PLAYER_HEIGHT;
                    }
                }
            }
        }
        // No line interrupt
        if(no_interrupt[0] && no_interrupt[1]){
            line->interrupt=false;
        }
    }
}
