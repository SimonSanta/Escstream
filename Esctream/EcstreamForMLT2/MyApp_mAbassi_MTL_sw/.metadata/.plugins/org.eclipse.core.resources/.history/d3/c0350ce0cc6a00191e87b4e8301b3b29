// --------------------------------------------------------------------
// Copyright (c) 2011 by Terasic Technologies Inc.
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development
//   Kits made by Terasic.  Other use of this code, including the selling
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use
//   or functionality of this code.
//
// --------------------------------------------------------------------
//
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------


#include "terasic_includes.h"
#include "gui.h"
#include "vip_fr.h"
#include "multi_touch2.h"
#include "simple_graphics.h"
#include "geometry.h"
#include "gesture.h"
#include "Const.h"
#include "level.h"
#include "game.h"
#include "queue.h"
#include "fonts.h"

#include "SysCall.h"          /* System Call layer stuff     */

//#define ENALBE_TOUCH_FILTER
#define DUAL_FRAME_BUFFER

#define FR_FRAME_0  0x20000000
#define FR_FRAME_1 (0x20000000 + FRAME_WIDTH*FRAME_HEIGHT*4)

#define FRAME_WIDTH  800
#define FRAME_HEIGHT 480
#define DOT_SIZE     6

//#define VALID_POINT(x,y) (((x)>=DOT_SIZE && (x)<FRAME_WIDTH-DOT_SIZE && (y)>=DOT_SIZE && (y)<FRAME_HEIGHT-DOT_SIZE)?TRUE:FALSE)

alt_u32 szPallete[] = {
    BLACK_24,
    WHITE_24,
    0xFFFFFF,
    0x0000FF,
    0x00FF00,
    0xFF0000,
    0x00FFFF,
    0xFFFF00,
    0xFF00FF,
};

typedef enum{
    BTN_GESTRUE = 0,
    BTN_CLEAR,
    BTN_WHITE,
    BTN_BLUE,
    BTN_GREEN,
    BTN_RED,
    BTN_SKY,
    BTN_YELLOW,
    BTN_PINK,
    BTN_NUM,

    BTN_NONE
}BUTTON_ID;

typedef struct{
    RECT rc;
    int  color;
}PALETTE_INFO;

typedef struct{
	RECT rcPaint;		// Drawing area
}DESK_INFO;

IMAGE *back;		// Background

VIP_FRAME_READER *pReader;
DESK_INFO *DeskInfo;
// Lines
IMAGE *black_up,*black_down,*black_left,*black_right,*white_up,*white_down,*white_left,*white_right,*plyr_white,*plyr_black;


void GUI_DeskInit( LVL *lvl){
    RectSet(&DeskInfo->rcPaint, DRAW_BORDER, pReader->width-DRAW_BORDER, DRAW_BORDER, pReader->height);
}

void GUI_DeskDraw(LVL *lvl){
	static LVL *prev_lvl;
	static int InitFlag = true;
	static IMAGE *menu;
	if(InitFlag){
		menu = initimage( "menubutton.dat", 89,98);
		InitFlag=false;
	}
	int prevDisplayFrame = pReader->DisplayFrame;

    RECT rc;
    RectCopy(&rc, &DeskInfo->rcPaint);

	displayimage(back, 0, 0, pReader);

    // vid_draw_box(rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);

    printf("Flagval = %d\n", *flag);

    // Print level selection
    if((*flag & 0x00000008)==8){
    	printf("Print level selection\n");
    	print_lvl_selection(rc,pReader);
    }

    // Print game
    else{
		// Print lines
		for(int i=0; i<lvl->nbr_lines; i++)
		{
			LINE* line = lvl->lines+i;
			if (line->interrupt)
			{
				printf("DeskDraw - Line dir=%d, x=%d, y=%d, w=%d, h=%d, stopat=%d\n",line->dir, line->x, line->y, line->width, line->height, line->stop_at);
				printf("5 DisplayFrame %d\n", pReader->DisplayFrame);
				switch (line->dir){
				case UP:
					if (line->color==BLACK)
						displayChunk(black_up, line->x, line->stop_at, 0, line->stop_at, line->width, 480, pReader);
					else
						displayChunk(white_up, line->x, line->stop_at, 0, line->stop_at, line->width, 480, pReader);
					//vid_draw_box(line->x, line->stop_at, line->x+line->width, line->y+line->height, line->color, DO_FILL, pReader);
					break;
				case DOWN:
					if (line->color==BLACK)
						displayChunk(black_down, line->x, line->y, 0, 0, line->width, line->stop_at, pReader);
					else
						displayChunk(white_down, line->x, line->y, 0, 0, line->width, line->stop_at, pReader);
					break;
				case LEFT:
					if (line->color==BLACK)
						displayChunk(black_left, line->stop_at, line->y, line->stop_at, 0, 800, line->height, pReader);
					else
						displayChunk(white_left, line->stop_at, line->y, line->stop_at, 0, 800, line->height, pReader);
					break;
				case RIGHT:
					if (line->color==BLACK)
						displayChunk(black_right, line->x, line->y, 0, 0, line->stop_at, line->height, pReader);
					else
						displayChunk(white_right, line->x, line->y, 0, 0, line->stop_at, line->height, pReader);
					break;
				}
			}
			else{
				switch (line->dir){
				case UP:
					if (line->color==BLACK)
						displayChunk(black_up, line->x, line->y, 0, 0,line->width, line->height, pReader);
						//displayChunk(black_right, line->x, line->y, 0, 0,line->x+line->width, line->height, pReader);

						else
						displayChunk(white_up, line->x, line->y, 0, 0,line->width, line->height, pReader);
						//displayChunk(black_right, line->x, line->y, 0, 0,line->x+line->width, line->height, pReader);
					break;
				case DOWN:
					if (line->color==BLACK)
						displayChunk(black_down, line->x, line->y, 0, 0,line->width, line->height, pReader);
					//displayChunk(black_right, line->x, line->y, 0, 0,line->x+line->width, line->height, pReader);

					else
						displayChunk(white_down, line->x, line->y, 0, 0,line->width, line->height, pReader);
					//displayChunk(black_right, line->x, line->y, 0, 0,line->x+line->width, line->height, pReader);

					break;
				case LEFT:
					if (line->color==BLACK)
						displayChunk(black_left, line->x, line->y, 0, 0, line->width, line->height, pReader);
					else
						displayChunk(white_left, line->x, line->y, 0, 0, line->width, line->height, pReader);
					break;
				case RIGHT:
					if (line->color==BLACK)
						displayChunk(black_right, line->x, line->y, 0, 0, line->width, line->height, pReader);
					else
						displayChunk(white_right, line->x, line->y, 0, 0, line->width, line->height, pReader);
					break;
				}
			}
			printf("6 DisplayFrame %d\n", pReader->DisplayFrame);

		}

		// (under) Draw players at their start positions + their target position
		for(int j=0;j<lvl->nbr_players;j++)
		{
			PLAYER* player = lvl->players+j;

			if (player->color==WHITE) {
				displayimage(plyr_white, player->x, player->y, pReader);
			}
			else {
				displayimage(plyr_black, player->x, player->y, pReader);
			}

			//vid_draw_box(player->x, player->y, player->x+39, player->y+39, player->color, DO_FILL, pReader);
			vid_draw_box(player->fin_x-20, player->fin_y-20, player->fin_x+19, player->fin_y+19, player->color, DO_NOT_FILL, pReader);	// Draw end position playe
		}

		// Draw Menu button
		displayimage(menu, 800-98, 480-89, pReader);

		// Draw selection menu if necessary
		print_selection_menu(rc,pReader);
    }

    if (prevDisplayFrame != pReader->DisplayFrame)
    	printf("!!!!!!!!!!!!!!!!!!!!!\n");
}

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
    bool bYes = TRUE;
    const int nMax = 50;
    if (abs(ptPre->x - ptNew->x) > nMax)
        bYes = FALSE;
    else if (abs(ptPre->y - ptNew->y) > nMax)
        bYes = FALSE;

    return bYes;
}

// Move player towards direction of touched point (X, Y) by 10px
// (record changes in the LVL structure)
void incrCoordinate(PLAYER *plyr, int X, int Y) {

	int dist_x = (X-20)-plyr->x;
	int dist_y = (Y-20)-plyr->y;

	if (abs(dist_x) > abs(dist_y)) {
		// Right
		if (dist_x > 0) {
			printf("Horizontal right move\n");
			plyr->x = plyr->x+3;
			if (dist_y > 0)
				plyr->y = plyr->y+1;
			else
				plyr->y = plyr->y-1;
		}
		// Left
		else {
			printf("Horizontal left move\n");
			plyr->x = plyr->x-3;
			if (dist_y > 0)
				plyr->y = plyr->y+1;
			else
				plyr->y = plyr->y-1;
		}
	}
	// Vertical move
	else {
		// Down
		if (dist_y > 0) {
			printf("Vertical down move\n");
			plyr->y = plyr->y+3;
			if (dist_x > 0)
				plyr->x = plyr->x+1;
			else
				plyr->x = plyr->x-1;
		}
		// Up
		else {
			printf("Vertical up move\n");
			plyr->y = plyr->y-3;
			if (dist_x > 0)
				plyr->x = plyr->x+1;
			else
				plyr->x = plyr->x-1;
		}
	}
}

void GUI_checkNDraw(LVL *lvl, VIP_FRAME_READER *pReader, DESK_INFO *DeskInfo) {
	// 1. Check if player has crushed a line
	//	 (records line changes in the LVL structure + update defeat if necessary)
	pos_correlator(lvl);

	// 2. Check if victory of both players
	if(success(lvl)){
		*flag = (*flag) | 0x00000004;
		printf("victory\n");
	}

	// 3. Redraw whole screen according to changes in the LVL structure
	SEM_t    *PtrSem;
	PtrSem = SEMopen("ImSemaphore");
	MBX_t    *PrtMbx;
	PrtMbx = MBXopen("ImMailbox", 1);
	MBXput(PrtMbx, (intptr_t *)lvl, -1); // -1 = Infinite blocking
	SEMwait(PtrSem, -1);    // -1 = Infinite blocking
	SEMreset(PtrSem);

	VIPFR_ActiveDrawFrame(pReader);

}

void setCoordinate(PLAYER *plyr, uint16_t X, uint16_t Y){
	plyr->x = X;
	plyr->y = Y;
}


void GUI(MTC2_INFO *pTouch){
    // video
	bool GO=true;
    static int InitFlag = true;
    LVL lvl;
    static uint16_t X1, Y1;
    static uint16_t XR = 1;
    static uint16_t YR = 1;
    static POINT Pt1, Pt2, Pt3, Pt4, Pt5, ptGesture, PtR;
    static alt_u8 Event, TouchNum;
    static const int nDotSize = DOT_SIZE;
    static RECT rcTouch;
	static RECT rcMenu;//added
	static RECT rcPlay1;//added
	static RECT rcLevel1,rcLevel2;//added
	static RECT rcReset1,rcReset2;//added

    static int ColorPen0, ColorPen1, ColorPen2,ColorPen3,ColorPen4,ButtonId, ButtonId2,ButtonId3,ButtonId4,ButtonId5;
    static bool UpdatePalette;
    static bool defeat;
    static bool victory;


#ifdef ENALBE_TOUCH_FILTER
    static POINT LastPt1, LastPt2;
    static alt_u32 LastTimePt1=0,LastTimePt2=0;
    static const alt_u32 ContinuedTime = alt_ticks_per_second()/50;
#endif

    if (InitFlag) {

        #ifdef DUAL_FRAME_BUFFER
            pReader =  VIPFR_Init((alt_u32 *)(ALT_LWFPGASLVS_OFST + ALT_VIP_VFR_0_BASE), (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
        #else
            pReader =  VIPFR_Init((alt_u32 *)(ALT_LWFPGASLVS_OFST + ALT_VIP_VFR_0_BASE), (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
        #endif // DUAL_FRAME_BUFFER
        VIPFR_Go(pReader, TRUE);

        GUI_DeskInit(&lvl); // Sets the infos inside the DESK_INFO structure (rcPaint)
        GUI_DeskDraw(&lvl); // Draws the drawable area

        VIPFR_ActiveDrawFrame(pReader);
        DESK_INFO pDeskInfo=*DeskInfo;
        RectCopy(&rcTouch, &pDeskInfo.rcPaint);
        RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);

		RectSet(&rcMenu, SCREEN_WIDTH-98, SCREEN_WIDTH, pDeskInfo.rcPaint.bottom-89, pDeskInfo.rcPaint.bottom);

		RectSet(&rcPlay1, 225, 554, 171,222);
		RectSet(&rcReset1, 225, 554,244,295);
		RectSet(&rcLevel1, 225, 554,317,368);

		RectSet(&rcReset2, 225, 554,186,236);
		RectSet(&rcLevel2, 225, 554,277,328);

		init_im_lvl(1);
        InitFlag = false;
    }
    // While game hasn't ended
    while (GO)
    {
    	// When touch event, moves the player 1 towards the touched position
    	if (MTC2_GetStatus(pTouch, &Event, &TouchNum, &X1, &Y1))
        {
          	printf("GUI: Touch event detected\n");
            PtSet(&Pt1, X1, Y1);
        	printf("goflagval:%x\n",*flag);

        	// Inside level selection menu
            if((*flag & 0x00000008)==8){
            	printf("GUI: in lvl selection\n");
            	in_lvl_sel_rect(&Pt1, &lvl, pReader);		// Change current level in LVL structure
				GUI_checkNDraw(&lvl, pReader, &DeskInfo);	// Draw accordingly
				*flag=*flag & 0xFFFFFFF8;	// Reset the three right flags
				*flag2=*flag2 & 0xFFFFFFF8;	// Reset the three right flags

            }
            // Inside game
            else{

            	// Menu button touched
            	if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcMenu))
				{
					*flag=(*flag) | 0x00000001;
					printf("GUI: Touch event Menu Open \n");
					*txdata =  (*flag<<28) | *txdata;			// Warn other player
					GUI_checkNDraw(&lvl, pReader, &DeskInfo);	// Draw accordingly
				}
            	//if not in break
				else if(*flag==0 && *flag2==0){
					if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcTouch))
					{
						PLAYER *ownPlyr = (&lvl)->players+1;	// Resp players+1 for other board

						incrCoordinate(ownPlyr, X1, Y1);			// Move own player
						GUI_checkNDraw(&lvl, pReader, &DeskInfo);	// Draw accordingly

						// Coordinate of our own player after touch event has been treated
						uint32_t XS = ownPlyr->x;
						uint32_t YS = ownPlyr->y;

						MTX_t	*TMtx = MTXopen("TXData Mtx");
						MTXlock(TMtx, -1);

						*txdata =  (*flag<<28) | (XS << 14) | YS;	// Warn other player

						MTXunlock(TMtx);
					}
				}
				else{
					//if lost or win
					if((*flag & 0x00000002)==2 || (*flag2 & 0x00000002)==2 || (*flag & 0x00000004)==4 || (*flag2 & 0x00000004)==4){
						if(TouchNum >= 1 && IsPtInRect(&Pt1, &rcLevel2)){
							printf("LEVEL selected in the menu\n");
							*flag=*flag | 0x00000008;
							*flag=*flag & 0xFFFFFFF8;	// Reset the three right flags
						    TSKsleep(OS_MS_TO_TICK(200));
						}
						else if(TouchNum >= 1 && IsPtInRect(&Pt1, &rcReset2)){
							printf("RESET selected in the menu\n");
							reset_lvl(&lvl);
							GUI_checkNDraw(&lvl, pReader, &DeskInfo);	// Draw accordingly
							*flag=*flag & 0xFFFFFFF0;	// Reset the four right flags
						}
					}
					else{
						if(TouchNum >= 1 && IsPtInRect(&Pt1, &rcLevel1)){
							printf("LEVEL selected in the menu\n");
							*flag=*flag | 0x00000008;
							*flag=*flag & 0xFFFFFFF8;	// Reset the three right flags
						    TSKsleep(OS_MS_TO_TICK(200));
						}
						else if(TouchNum >= 1 && IsPtInRect(&Pt1, &rcReset1)){
							printf("RESET selected in the menu\n");
							reset_lvl(&lvl);
							GUI_checkNDraw(&lvl, pReader, &DeskInfo);	// Draw accordingly
							*flag=*flag & 0xFFFFFFF0;	// Reset the four right flags
						}
						else if(TouchNum >= 1 && IsPtInRect(&Pt1, &rcPlay1) && (*flag & 0x00000001)==1){
							printf("PLAY selected in the menu\n");
							GUI_checkNDraw(&lvl, pReader, &DeskInfo);	// Draw accordingly
							*flag=*flag & 0xFFFFFFF0;	// Reset the four right flags
						}
					}
				}
            }
			MTC2_ClearEvent(pTouch);
        }
        // When SPI event (i.e. received msg from other board)
    	// Moves the player 2 towards the touched position
    	if(SPI_GetStatus(&XR, &YR)){
        	printf("GUI: Position received: X = %d, Y = %d\n", XR, YR);
        	PtSet(&PtR, XR, YR);
        	if (IsPtInRect(&PtR, &rcTouch)){
        		PLAYER *otherPlyr = (&lvl)->players;	// Resp players for other board
        		setCoordinate(otherPlyr, XR, YR);
        		GUI_checkNDraw(&lvl, pReader, &DeskInfo);
        	}
        }
    }
}

void in_lvl_sel_rect(POINT* Pt1, LVL* lvl ,VIP_FRAME_READER *pReader ){
	printf("in_lvl_sel_rect\n");
	RECT rcLevel1,rcLevel2,rcLevel3,rcLevel4,rcLevel5,rcLevel6;
	RECT rc;
	RectSet(&rc, DRAW_BORDER, pReader->width-DRAW_BORDER, DRAW_BORDER, pReader->height-2*DRAW_BORDER-MENU_HEIGHT);
	RectSet(&rcLevel1,39,241,166,268);
	RectSet(&rcLevel2,299,501,166,268);
	RectSet(&rcLevel3,553,756,166,268);
	RectSet(&rcLevel4,39,241,334,436);
	RectSet(&rcLevel5,299,501,334,436);
	RectSet(&rcLevel6,553,756,334,436);
	new_lvl=1;
	if (IsPtInRect(Pt1, &rcLevel1))
	{
		printf("GUI: Touch event lvl 1 selected \n");
		*flag=*flag & 0xFFFFFFF0;//reset the four right flags
		*flag2=*flag2 & 0xFFFFFFF0;//reset the four right flags
		change_lvl(lvl,1);
		init_im_lvl(1);
	}
	if (IsPtInRect(Pt1, &rcLevel2))
		{
			printf("GUI: Touch event lvl 2 selected \n");
			*flag=*flag & 0xFFFFFFF0;//reset the four right flags
			*flag2=*flag2 & 0xFFFFFFF0;//reset the four right flags
			change_lvl(lvl,2);
			init_im_lvl(2);
		}
	if (IsPtInRect(Pt1, &rcLevel3))
		{
			printf("GUI: Touch event lvl 3 selected \n");
			*flag=*flag & 0xFFFFFFF0;//reset the four right flags
			*flag2=*flag2 & 0xFFFFFFF0;//reset the four right flags
			change_lvl(lvl,3);
			printf("flagval:%d\n",*flag);
			init_im_lvl(3);
		}
	if (IsPtInRect(Pt1, &rcLevel4))
		{
			printf("GUI: Touch event lvl 4 selected \n");
			*flag=*flag & 0xFFFFFFF0;//reset the four right flags
			*flag2=*flag2 & 0xFFFFFFF0;//reset the four right flags
			change_lvl(lvl,4);
			init_im_lvl(4);
		}
	if (IsPtInRect(Pt1, &rcLevel5))
		{
			printf("GUI: Touch event lvl 5 selected \n");
			*flag=*flag & 0xFFFFFFF0;//reset the four right flags
			*flag2=*flag2 & 0xFFFFFFF0;//reset the four right flags
			change_lvl(lvl,5);
			init_im_lvl(5);
		}
	if (IsPtInRect(Pt1, &rcLevel6))
		{
			printf("GUI: Touch event lvl 6 selected \n");
			*flag=*flag & 0xFFFFFFF0;//reset the four right flags
			*flag2=*flag2 & 0xFFFFFFF0;//reset the four right flags
			change_lvl(lvl,6);
			init_im_lvl(6);
		}
}
void init_im_lvl(int lvl){
    static int InitFlag = true;
    static IMAGE *black_up1,*black_down1,*black_left1,*black_right1,*white_up1,*white_down1,*white_left1,*white_right1,*plyr_white1,*plyr_black1,*back1;
    static IMAGE *black_up2,*black_down2,*black_left2,*black_right2,*white_up2,*white_down2,*white_left2,*white_right2,*plyr_white2,*plyr_black2,*back2;
    static IMAGE *black_up3,*black_down3,*black_left3,*black_right3,*white_up3,*white_down3,*white_left3,*white_right3,*plyr_white3,*plyr_black3,*back3;
    static IMAGE *black_up4,*black_down4,*black_left4,*black_right4,*white_up4,*white_down4,*white_left4,*white_right4,*plyr_white4,*plyr_black4,*back4;
    static IMAGE *black_up_s,*black_down_s,*black_left_s,*black_right_s,*white_up_s,*white_down_s,*white_left_s,*white_right_s;
    if(InitFlag){
    	// Design elements
    	   black_right_s = initimage( "black_right.dat", 39, 800);
		   black_left_s = initimage( "black_left.dat", 39, 800);
		   black_up_s = initimage("black_up.dat", 480, 39);
		   black_down_s = initimage( "black_down.dat", 480, 39);
		   white_right_s = initimage( "white_right.dat", 39, 800);
		   white_left_s = initimage( "white_left.dat", 39, 800);
		   white_up_s = initimage( "white_up.dat", 480, 39);
		   white_down_s = initimage( "white_down.dat", 480, 39);

    	    back1 = initimage("BatTroll.dat", 480, 800);
    	    plyr_black1 = initimage( "batmangreen.dat",40, 40);
    	    plyr_white1 = initimage( "robingreen.dat",40, 40);

		   back2 = initimage( "farwest.dat", 480, 800);
		   plyr_black2 = initimage( "EspritGrandChienLoup.dat",40, 40);
		   plyr_white2 = initimage("BountyHunter.dat",40, 40);

		   back3 = initimage( "back2.dat", 480, 800);

		   back4 = initimage( "Spongebobbackground.dat", 480, 800);
		   plyr_black4 = initimage( "patrickgreen.dat",40, 40);
		   plyr_white4 = initimage("bobgreen.dat",40, 40);
		   black_right4 = initimage( "boblineh.dat", 480, 39);
		   black_left4 = black_right4;
		   black_up4 = initimage( "patrickv.dat", 480, 39);
		   black_down4 = black_up4;
		   white_right4 = initimage( "boblineh.dat", 480, 39);
		   white_left4 = white_right4;
		   white_up4 = initimage( "boblinev.dat", 480, 39);
		   white_down4 = white_up4;

    	InitFlag=false;
    }
	switch(lvl) {
	   case 1:
			black_right = black_right_s;
			black_left = black_left_s;
			black_up = black_up_s;
			black_down = black_down_s;
			white_right = white_right_s;
			white_left = white_left_s;
			white_up = white_up_s;
			white_down = white_down_s;
			back = back1;
			plyr_black = plyr_black1;
			plyr_white = plyr_white1;
	      break;
	   case 2:
		   black_right = black_right_s;
			black_left = black_left_s;
			black_up = black_up_s;
			black_down = black_down_s;
			white_right = white_right_s;
			white_left = white_left_s;
			white_up = white_up_s;
			white_down = white_down_s;
			back = back2;
			plyr_black = plyr_black2;
			plyr_white = plyr_white2;
		  break;
	   case 3:
		   black_right = black_right_s;
			black_left = black_left_s;
			black_up = black_up_s;
			black_down = black_down_s;
			white_right = white_right_s;
			white_left = white_left_s;
			white_up = white_up_s;
			white_down = white_down_s;
			back = back3;
			plyr_black = plyr_black2;
			plyr_white = plyr_white2;
	   	  break;
	   case 4:
		   black_right = black_right4;
			black_left = black_left4;
			black_up = black_up4;
			black_down = black_down4;
			white_right = white_right4;
			white_left = white_left4;
			white_up = white_up4;
			white_down = white_down4;
			back = back4;
			plyr_black = plyr_black4;
			plyr_white = plyr_white4;
		  break;

	   //default : /* Optional */
	}
}
// Mutex-handled access to lastMsg (returns true if other player position has changed)
bool SPI_GetStatus(uint16_t *XR, uint16_t *YR){
	bool bChange = false;

	static uint16_t prevX = 0;
	static uint16_t prevY = 0;
	static int prevFlag = 0;

	MTX_t *RMtx = MTXopen("RXData Mtx");
	MTXlock(RMtx, -1);

	if ((lastMsg->xcoord!=prevX)|(lastMsg->ycoord!=prevY)|*flag!=prevFlag) {
		printf("SPI_GetStatus: treating last received msg\n");
		*XR = lastMsg->xcoord;
		*YR = lastMsg->ycoord;
		prevX = *XR;
		prevY = *YR;
		prevFlag=*flag;
		bChange = true;
	}

	MTXunlock(RMtx);

	return bChange;
}

void print_lvl_selection(RECT rc,VIP_FRAME_READER *pReader ){
    static int InitFlag = true;
    static IMAGE *back_menu;
    if(InitFlag){
    	back_menu = initimage( "levelmenu.dat", 480, 800);
    	InitFlag=false;
    }
	displayimage(back_menu, 0, 0, pReader);
}

void print_selection_menu(RECT rc,VIP_FRAME_READER *pReader ){
	static int InitFlag = true;
	static IMAGE *menu,*lost,*win,*wait;
	if(InitFlag){
		menu = initimage( "break.dat",  320,451);
		lost = initimage( "lost.dat", 320,451);
		win = initimage( "win.dat", 320,451);
		wait = initimage( "wait.dat",320,451);
		InitFlag=false;
	}
	if((*flag & 0x00000001)==1){
		printf("Draw menu case\n");
		displayimage(menu,  174, 79, pReader);
	}

	if((*flag2 & 0x00000001)==1  ){
		printf("Draw pause triggered by other player case\n");
		displayimage(wait, 174, 79, pReader);
	}

	if((*flag & 0x00000002)==2 || (*flag2 & 0x00000002)==2){
		printf("Draw lost case\n");
		displayimage(lost, 174, 79, pReader);
	}

	if((*flag & 0x00000004)==4 || (*flag2 & 0x00000004)==4){
		printf("Draw win case\n");
		displayimage(win, 174, 79, pReader);
	}
}
